#!/usr/bin/env bash

# This script is designed to help someone bootstrap terraform and requires the
# user already has AWS credentials and Terraform installed

# NOTE: we use the gcloud command line tool to verify you have access configured
check_gcp_prerequisites() {
  gcloud config get project >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo "You must configure your local 'gcloud' client before using this tool"
    echo "Run 'gcloud auth login'"
    echo "Run 'gcloud projects list' to see your projects"
    echo "Run 'gcloud config set project <project-id>'"
    echo "Run 'gcloud auth application-default login'"
    echo "Run 'bin/bootstrap-cloud' to continue"
    exit 1
  fi
  return 0
}

# NOTE: we use the aws command line tool to verify you have access configured
check_aws_prerequisites() {
  aws sts get-caller-identity 2>&1 >/dev/null
  if [[ $? -ne 0 ]]; then
    echo "You must configure your local 'aws' client before using this tool"
    exit 1
  fi
}

check_terraform_prerequisites() {
  local __tfver=$(terraform version | sed 's/^.* v//' 2>/dev/null)
  if [[ $? -eq 0 ]]; then
    local __tmp=( ${__tfver//./ } )
    if [[ ${__tmp[0]} -eq 1 ]]; then
      if [[ ${__tmp[1]} -eq 0 ]] && [[ ${__tmp[2]} -ge 3 ]]; then
        :
      elif [[ ${__tmp[1]} -ge 1 ]]; then
        :
      else
        echo "You must install Terraform 1.0.3 or higher"
        exit 1
      fi
    else
      echo "You must install Terraform 1.0.3 or higher"
      exit 1
    fi
  else
    echo "You must install Terraform 1.0.3 or higher"
    exit 1
  fi
  return 0
}

__root=$(cd $(dirname ${BASH_SOURCE[0]})/..; pwd -P)

# Check for top-level config.yaml to override defaults
if test -e ${__root}/config.yaml; then
  __cloud=$(grep ^cloud_provider: ${__root}/config.yaml | awk '{print $2}')
  __bucket=$(grep ^terraform_state_bucket: ${__root}/config.yaml | awk '{print $2}')
  __region=$(grep ^terraform_state_region: ${__root}/config.yaml | awk '{print $2}')
  [[ -z ${__bucket} ]] && unset __bucket
  [[ -z ${__region} ]] && unset __region
else
  echo "No config.yaml found, using defaults"
  __cloud=k3d
fi

echo bootstrapping terraform for ${__cloud}

case ${__cloud} in
  aws)
  check_aws_prerequisites
  check_terraform_prerequisites

  set -e
  cd ${__root}/bootstrap/aws-terraform
  if [[ -z ${__bucket} ]] && [[ -z ${__region} ]]; then
    terraform init
    terraform validate
    set +e
    terraform plan -detailed-exitcode -input=false
    __ret=$?
    case ${__ret} in
      2) terraform apply -auto-approve ;;
      0) echo terraform apply skipped with no changes ;;
      *) echo terraform plan result ${__ret} && exit ${__ret} ;;
    esac
    __ret=$?
    case ${__ret} in
      0) echo terraform apply successful ;;
      *) echo terraform apply result ${__ret} && exit ${__ret} ;;
    esac

    set -e
    __bucket=$(terraform output -raw terraform_state_bucket)
    __region=$(terraform output -raw region)
  fi

  if [[ ${__bucket} =~ terraform-state ]]; then
    echo Terraform state bucket: ${__bucket}
  else
    echo Cloud not detect state bucket && exit 1
  fi
  if [[ ${__region} == REGION ]]; then
    echo Region is not set && exit 1
  else
    echo Terraform state bucket region: ${__region}
  fi

  set +e
  # configure bootstrap backend
  __configure_bootstrap_backend=false
  if [[ ! -e backend.tf ]]; then
    __configure_bootstrap_backend=true
  elif [[ $(grep -o BUCKET_NAME backend.tf 2>/dev/null) == BUCKET_NAME ]]; then
    __configure_bootstrap_backend=true
  elif [[ $(grep -o REGION backend.tf 2>/dev/null) == REGION ]]; then
    __configure_bootstrap_backend=true
  fi
  set -e
  if [[ ${__configure_bootstrap_backend} == true ]]; then
    echo configuring bootstrap backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        backend.tf.example > backend.tf
    terraform init -migrate-state -force-copy
  fi

  echo starting stage0 on ${__cloud}
  cd ${__root}/stage0/aws-terraform
  if ! test -e backend.tf; then
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        backend.tf.example > backend.tf
  fi

  terraform init
  terraform validate
  set +e
  terraform plan -detailed-exitcode -input=false
  __ret=$?
  case ${__ret} in
    2) terraform apply -auto-approve ;;
    0) echo terraform apply skipped with no changes ;;
    *) echo terraform plan result ${__ret} && exit ${__ret} ;;
  esac
  __ret=$?
  case ${__ret} in
    0) echo terraform apply successful ;;
    *) echo terraform apply result ${__ret} && exit ${__ret} ;;
  esac

  if test -e ${__root}/config.yaml; then
    __name=$(grep ^cluster_name: ${__root}/config.yaml | awk '{print $2}')
  fi
  if [[ -z ${__name} ]]; then
    __name=dmtr-cluster
  fi

  set -e
  if [[ $(kubectl config get-contexts | awk '{print $2}' | grep -o aws-${__name} 2>/dev/null) == aws-${__name} ]]; then
    echo cluster context found: aws-${__name}
  else
    echo configuring cluster: aws-${__name}
    aws eks update-kubeconfig --region ${__region} --name ${__name} --alias aws-${__name}
  fi

  cd ${__root}/stage1
  if ! test -e backend.tf; then
    echo configuring stage1 backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        backend.aws.tf.example > backend.tf
  fi
  if ! test -e env.auto.tfvars; then
    echo configuring stage1 terraform variables
    sed -e 's:^# ::' \
        -e 's:aws" | "gcp" | "azure" | "none:aws:' \
	-e "s#some-context#aws-${__name}#" \
        env.auto.tfvars.example > env.auto.tfvars
    echo "aws_eks_cluster_name = \"${__name}\"" >> env.auto.tfvars
  fi
  terraform init
  terraform validate

  cd ${__root}/stage2
  if ! test -e backend.tf; then
    echo configuring stage2 backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        backend.aws.tf.example > backend.tf
  fi
  if ! test -e env.auto.tfvars; then
    echo configuring stage2 terraform variables
    sed -e 's:^# ::' \
	-e "s#some-context#aws-${__name}#" \
        env.auto.tfvars.example > env.auto.tfvars
  fi
  terraform init
  terraform validate

  cd ${__root}/stage3
  if ! test -e backend.tf; then
    echo configuring stage3 backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        backend.aws.tf.example > backend.tf
  fi
  if ! test -e env.auto.tfvars; then
    echo configuring stage3 terraform variables
    sed -e 's:^# ::' \
        -e "s:dmtr-cluster:${__name}:" \
        -e "s#some-context#aws-${__name}#" \
        env.auto.tfvars.example > env.auto.tfvars
  fi
  terraform init
  terraform validate
  ;;
  gcp)
    check_gcp_prerequisites
    check_terraform_prerequisites
    
    # Config file has to exist at this point
    if [[ ! -e ${__root}/config.yaml ]]; then
      echo "config.yaml not found, exiting..."; exit 1
    fi
    # Get the project ID
    __project_id=$(grep ^terraform_project_id: ${__root}/config.yaml | awk '{print $2}')
    if [[ -z ${__project_id} ]]; then
      echo "terraform_project_id not found in config.yaml, exiting..." 
      echo "Hint: run 'gcloud projects list' to see your projects"
      exit 1
    fi
    
    set -e
    cd ${__root}/bootstrap/gcp-terraform
    terraform init
    terraform validate
    set +e
    terraform plan -detailed-exitcode -input=false  
    
    __ret=$?
    case ${__ret} in
      2) terraform apply -auto-approve ;;
      0) echo terraform apply skipped with no changes ;;
      *) echo terraform plan result ${__ret} && exit ${__ret} ;;
    esac
    __ret=$?
    case ${__ret} in
      0) echo terraform apply successful ;;
      *) echo terraform apply result ${__ret} && exit ${__ret} ;;
    esac

    set -e
    __bucket=$(terraform output -raw terraform_state_bucket)
    __region=$(terraform output -raw region)
    __kmskey=$(terraform output -raw terraform_state_crypto_key)
    if [[ ${__bucket} =~ bucket-tfstate ]]; then
      echo Terraform state bucket: ${__bucket}
    else
      echo Could not detect state bucket && exit 1
    fi
    if [[ ${__region} == REGION ]]; then
      echo Region is not set && exit 1
    else
      echo Terraform state bucket region: ${__region}
    fi
    if [[ ${__kmskey} =~ terraform-state-bucket ]]; then
      echo Terraform state KMS key: ${__kmskey}
    else
      echo Could not detect state KMS key && exit 1
    fi
    
    set +e
    # configure bootstrap backend
    __configure_bootstrap_backend=false
    if [[ ! -e backend.tf ]]; then
      __configure_bootstrap_backend=true
    elif [[ $(grep -o BUCKET_NAME backend.tf 2>/dev/null) == BUCKET_NAME ]]; then
      __configure_bootstrap_backend=true
    elif [[ $(grep -o KMS_ENCRYPTION_KEY backend.tf 2>/dev/null) == KMS_ENCRYPTION_KEY ]]; then
      __configure_bootstrap_backend=true
    fi
    set -e
    if [[ ${__configure_bootstrap_backend} == true ]]; then
      echo configuring bootstrap backend
      sed -e "s#BUCKET_NAME#${__bucket}#" \
          -e "s#KMS_ENCRYPTION_KEY#${__kmskey}#" \
          backend.tf.example > backend.tf
      terraform init -migrate-state -force-copy
    fi

    set +e
    cd ${__root}/bootstrap/gcp-terraform
    # configure projects backend
    __configure_projects_backend=false
    if [[ ! -e backend.tf ]]; then
      __configure_projects_backend=true
    elif [[ $(grep -o BUCKET_NAME backend.tf 2>/dev/null) == BUCKET_NAME ]]; then
      __configure_projects_backend=true
    elif [[ $(grep -o KMS_ENCRYPTION_KEY backend.tf 2>/dev/null) == KMS_ENCRYPTION_KEY ]]; then
      __configure_projects_backend=true
    fi
    set -e
    if [[ ${__configure_projects_backend} == true ]]; then
      echo configuring projects backend
      sed -e "s#BUCKET_NAME#${__bucket}#" \
          -e "s#KMS_ENCRYPTION_KEY#${__kmskey}#" \
          backend-gcp.tf.example > backend.tf
      terraform init -migrate-state -force-copy
    fi
    echo "Initial Bootstrap Complete"
    # ----------------- STAGE 0 -----------------
    echo Starting stage0 on ${__cloud}
    cd ${__root}/stage0/gcp-terraform
    if ! test -e backend.tf; then
      sed -e "s#BUCKET_NAME#${__bucket}#" \
          -e "s#KMS_ENCRYPTION_KEY#${__kmskey}#" \
            backend.tf.example > backend.tf
    fi

    terraform init
    terraform validate
    set +e
    terraform plan -detailed-exitcode -input=false
    __ret=$?
    case ${__ret} in
      2) terraform apply -auto-approve ;;
      0) echo terraform apply skipped with no changes ;;
      *) echo terraform plan result ${__ret} && exit ${__ret} ;;
    esac
    __ret=$?
    case ${__ret} in
      0) echo terraform apply successful ;;
      *) echo terraform apply result ${__ret} && exit ${__ret} ;;
    esac

    if test -e ${__root}/config.yaml; then
      __name=$(grep ^cluster_name: ${__root}/config.yaml | awk '{print $2}')
    fi
    if [[ -z ${__name} ]]; then
      __name=dmtr-cluster
    fi

    set -e
    if [[ $(kubectl config get-contexts | awk '{print $2}' | grep -o gcp-${__name} 2>/dev/null) == gcp-${__name} ]]; then
      echo cluster context found: gcp-${__name}
    else
      echo configuring cluster: gcp-${__name}
      gcloud container clusters get-credentials ${__name} --region ${__region} --project ${__project_id}
    fi
    echo "Stage 0 Complete"
    # ----------------- STAGE 1 -----------------
    echo "Starting Stage 1 on ${__cloud}"
    cd ${__root}/stage1
    if ! test -e backend.tf; then
      sed -e "s#BUCKET_NAME#${__bucket}#" \
          -e "s#KMS_ENCRYPTION_KEY#${__kmskey}#" \
            backend.gcp.tf.example > backend.tf
    fi

    current_context=$(kubectl config current-context)
    if [[ -z ${current_context} ]]; then
      echo "No current context found, exiting..."
      exit 1
    fi
    if [[ "${current_context}" != "${__cloud}-${__name}" ]]; then
      kubectl config rename-context "${current_context}" "${__cloud}-${__name}"
      echo "Context has been renamed to: ${__cloud}-${__name}"
    fi

    if ! test -e env.auto.tfvars; then
      echo "configuring stage1 terraform variables"
      sed -e 's:^# ::' \
          -e "s:cloud_provider = \"aws\"|\"gcp\"|\"azure\"|\"kind\"|\"k3d\"|\"other\":cloud_provider = \"${__cloud}\":" \
          -e "s#k8s_context = \"some-context\"#k8s_context = \"${__cloud}-${__name}\"#" \
          env.auto.tfvars.example > env.auto.tfvars
      echo "${__cloud}_cluster_name = \"${__name}\"" >> env.auto.tfvars
    fi
    terraform init
    terraform validate
    # ----------------- STAGE 2 -----------------
    echo "Starting Stage 2 on ${__cloud}"
    cd ${__root}/stage2
    if ! test -e backend.tf; then
      sed -e "s#BUCKET_NAME#${__bucket}#" \
          -e "s#KMS_ENCRYPTION_KEY#${__kmskey}#" \
            backend.gcp.tf.example > backend.tf
    fi

    if ! test -e env.auto.tfvars; then
      echo "configuring stage2 terraform variables"
      sed -e 's:^# ::' \
          -e "s#k8s_context = \"some-context\"#k8s_context = \"${__cloud}-${__name}\"#" \
          env.auto.tfvars.example > env.auto.tfvars
    fi
    terraform init
    terraform validate
    # ----------------- STAGE 3 -----------------
    echo "Starting Stage 3 on ${__cloud}"
    cd ${__root}/stage3
    if ! test -e backend.tf; then
      sed -e "s#BUCKET_NAME#${__bucket}#" \
          -e "s#KMS_ENCRYPTION_KEY#${__kmskey}#" \
            backend.gcp.tf.example > backend.tf
    fi

    if ! test -e env.auto.tfvars; then
      echo "configuring stage3 terraform variables"
      sed -e 's:^# ::' \
          -e "s#k8s_context = \"some-context\"#k8s_context = \"${__cloud}-${__name}\"#" \
          env.auto.tfvars.example > env.auto.tfvars
    fi
    terraform init
    terraform validate
    ;;
k3d)
  cd ${__root}/bootstrap
  if test -e ${__root}/config.yaml; then
    __name=$(grep ^cluster_name: ${__root}/config.yaml | awk '{print $2}')
  fi
  if [[ -z ${__name} ]]; then
    __name=dmtr-cluster
  fi
  echo k3d cluster create --k3s-arg "--disable=traefik@server:0" --image rancher/k3s:v1.25.6-k3s1 --port 80:80@server:0:direct --no-lb ${__name}
  sleep 1
  echo waiting for local-path-provisioner
  while true; do
    kubectl get -n kube-system deployment/local-path-provisioner configmap/local-path-config
    __ret=$?
    if [[ ${__ret} -eq 0 ]]; then
      break
    fi
  done
  echo patching
  set -e
  # Patch local-path-provisioner to enable RWX PVs
  kubectl patch -n kube-system configmap/local-path-config --patch-file patches/local-path-provisioner-configmap.yaml
  kubectl patch -n kube-system deployment/local-path-provisioner --patch-file patches/local-path-provisioner-deployment.yaml
  # Patches local-path storageclass to not default
  kubectl patch storageclass/local-path --patch-file patches/local-path-provisioner-storageclass.yaml

  cd ${__root}/stage1
  if ! test -e env.auto.tfvars; then
    echo configuring stage1 terraform variables
    sed -e 's:^# ::' \
        -e 's:aws" | "gcp" | "azure" | "none:k3d:' \
	-e "s#some-context#k3d-${__name}#" \
        env.auto.tfvars.example > env.auto.tfvars
  fi
  ;;
*) echo "Invalid choice for the cloud_provider. Selected ${__cloud} is not supported" && exit 1 ;;
esac
