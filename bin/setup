#!/usr/bin/env bash

# This script is designed to help someone bootstrap terraform and requires the
# user already has AWS or GCP credentials and Terraform installed

# NOTE: we use the gcloud command line tool to verify you have access configured
check_gcp_prerequisites() {
  gcloud config get project >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo "You must configure your local 'gcloud' client before using this tool"
    echo "Run 'gcloud auth login'"
    echo "Run 'gcloud projects list' to see your projects"
    echo "Run 'gcloud config set project <project-id>'"
    echo "Run 'gcloud auth application-default login'"
    echo "Run 'bin/bootstrap-cloud' to continue"
    exit 1
  fi
  return 0
}

# NOTE: we use the aws command line tool to verify you have access configured
check_aws_prerequisites() {
  aws sts get-caller-identity >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
    echo "You must configure your local 'aws' client before using this tool"
    exit 1
  fi

  local __tfver=$(terraform version 2>/dev/null | sed 's/^.* v//' 2>/dev/null)
  if [[ $? -eq 0 ]]; then
    local __tmp=( ${__tfver//./ } )
    if [[ ${__tmp[0]} -eq 1 ]]; then
      if [[ ${__tmp[1]} -eq 0 ]] && [[ ${__tmp[2]} -ge 3 ]]; then
        :
      elif [[ ${__tmp[1]} -ge 1 ]]; then
        :
      else
        echo "You must install Terraform 1.0.3 or higher"
        exit 1
      fi
    else
      echo "You must install Terraform 1.0.3 or higher"
      exit 1
    fi
  else
    echo "You must install Terraform 1.0.3 or higher"
    exit 1
  fi
  return 0
}

__root=$(cd $(dirname ${BASH_SOURCE[0]})/..; pwd -P)

# Check for top-level config.yaml to override defaults
if test -e ${__root}/config.yaml; then
  __bucket=$(grep ^terraform_state_bucket: ${__root}/config.yaml | awk '{print $2}')
  __cloud=$(grep ^cloud_provider: ${__root}/config.yaml | awk '{print $2}')
  #If cloud is gcp, we need to setup the project_id
  if [[ ${__cloud} == gcp ]]; then
    __project_id=$(grep ^terraform_project_id: ${__root}/config.yaml | awk '{print $2}')
    if [[ -z ${__project_id} ]]; then
      echo "terraform_project_id not found in config.yaml, exiting..."
      echo "Hint: run 'gcloud projects list' to see your projects"
      exit 1
    fi
    __name=$(grep ^cluster_name: ${__root}/config.yaml | awk '{print $2}')
    if [[ -z ${__name} ]]; then
      __name=dmtr-cluster
    fi
  fi
  __cloudflared_token=$(grep ^cloudflared_token: ${__root}/config.yaml | awk '{print $2}')
  __cloudflare_token=$(grep ^cloudflare_token: ${__root}/config.yaml | awk '{print $2}')
  __cluster_name=$(grep ^cluster_name: ${__root}/config.yaml | awk '{print $2}')
  __region=$(grep ^terraform_state_region: ${__root}/config.yaml | awk '{print $2}')
  __kmskey=$(grep ^terraform_state_kmskey: ${__root}/config.yaml | awk '{print $2}')
  __dmtrd_cluster_id=$(grep ^dmtrd_cluster_id: ${__root}/config.yaml | awk '{print $2}')
  __dmtrd_broker_urls=$(grep ^dmtrd_broker_urls: ${__root}/config.yaml | awk '{print $2}')
  __dmtrd_kafka_topic=$(grep ^dmtrd_kafka_topic: ${__root}/config.yaml | awk '{print $2}')
  __dmtrd_kafka_username=$(grep ^dmtrd_kafka_username: ${__root}/config.yaml | awk '{print $2}')
  __dmtrd_kafka_password=$(grep ^dmtrd_kafka_password: ${__root}/config.yaml | awk '{print $2}')
  __dmtrd_consumer_name=$(grep ^dmtrd_consumer_name: ${__root}/config.yaml | awk '{print $2}')
  __dmtrd_consumer_monitor_name=$(grep ^dmtrd_consumer_monitor_name: ${__root}/config.yaml | awk '{print $2}')
  __dmtrd_consumer_cache_name=$(grep ^dmtrd_consumer_cache_name: ${__root}/config.yaml | awk '{print $2}')
  __provider_name=$(grep ^provider_name: ${__root}/config.yaml | awk '{print $2}')
  [[ -z ${__bucket} ]] && unset __bucket
  [[ -z ${__region} ]] && unset __region
else
  __cloud=k3d
fi
if [[ -z ${__cluster_name} ]]; then
  __cluster_name=dmtr-cluster
fi
if [[ -z ${__cloudflared_token} ]]; then
  echo you must configure cloudflared_token in config.yaml
  exit 1
fi

echo configuring terraform for ${__cloud}

if [[ ${__cloud} == aws ]]; then
  check_aws_prerequisites

  set -e
  if [[ ${__bucket} =~ terraform-state ]]; then
    echo Terraform state bucket: ${__bucket}
  else
    echo Cloud not detect state bucket && exit 1
  fi
  if [[ ${__region} == REGION ]]; then
    echo Region is not set && exit 1
  else
    echo Terraform state bucket region: ${__region}
  fi

  cd ${__root}/bootstrap/aws-terraform
  set +e
  # configure bootstrap backend
  __configure_bootstrap_backend=false
  if [[ ! -e backend.tf ]]; then
    __configure_bootstrap_backend=true
  fi
  if [[ $(grep -o BUCKET_NAME backend.tf 2>/dev/null) == BUCKET_NAME ]]; then
    __configure_bootstrap_backend=true
  fi
  if [[ $(grep -o REGION backend.tf 2>/dev/null) == REGION ]]; then
    __configure_bootstrap_backend=true
  fi

  set -e
  if [[ ${__configure_bootstrap_backend} == true ]]; then
    echo configuring bootstrap backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        backend.tf.example > backend.tf
  fi
  terraform init

  cd ${__root}/stage0/aws-terraform
  if ! test -e backend.tf; then
    echo configuring stage0 backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        backend.tf.example > backend.tf
  fi
  terraform init

  set -e
  if [[ $(kubectl config get-contexts | awk '{print $2}' | grep -o aws-${__cluster_name} 2>/dev/null) == aws-${__cluster_name} ]]; then
    echo cluster context found: aws-${__cluster_name}
  else
    echo configuring cluster: aws-${__cluster_name}
    aws eks update-kubeconfig --region ${__region} --name ${__cluster_name} --alias aws-${__cluster_name}
  fi

  cd ${__root}/stage1
  if ! test -e backend.tf; then
    echo configuring stage1 backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        backend.aws.tf.example > backend.tf
  fi
  if ! test -e env.auto.tfvars; then
    echo configuring stage1 terraform variables
    sed -e 's:^# ::' \
        -e 's:aws"|"gcp"|"azure"|"kind"|"k3d"|"other:aws:' \
	-e "s#some-context#aws-${__cluster_name}#" \
        env.auto.tfvars.example > env.auto.tfvars
    echo "aws_eks_cluster_name = \"${__cluster_name}\"" >> env.auto.tfvars
  fi
  terraform init

  cd ${__root}/stage2
  if ! test -e backend.tf; then
    echo configuring stage2 backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        backend.aws.tf.example > backend.tf
  fi
  if ! test -e env.auto.tfvars; then
    echo configuring stage2 terraform variables
    sed -e 's:^# ::' \
	-e "s#some-context#aws-${__cluster_name}#" \
        env.auto.tfvars.example > env.auto.tfvars
  fi
  terraform init

  cd ${__root}/stage3
  if ! test -e backend.tf; then
    echo configuring stage3 backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        backend.aws.tf.example > backend.tf
  fi
  if ! test -e env.auto.tfvars; then
    echo configuring stage3 terraform variables
    sed -e 's:^# ::' \
        -e "s:eyJ...:${__cloudflared_token}:" \
	-e "s:dmtr-cluster:${__cluster_name}:" \
	-e "s#some-context#aws-${__cluster_name}#" \
        env.auto.tfvars.example > env.auto.tfvars
  fi
  terraform init

elif [[ ${__cloud} == gcp ]]; then
  check_gcp_prerequisites

  cd ${__root}/bootstrap/gcp-terraform
  if ! test -e backend.tf; then
    echo configuring bootstrap backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        -e "s#KMS_ENCRYPTION_KEY#${__kmskey}#" \
        backend.tf.example > backend.tf
  fi
  terraform init

  cd ${__root}/stage0/gcp-terraform
  if ! test -e backend.tf; then
    echo configuring stage0 backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        -e "s#KMS_ENCRYPTION_KEY#${__kmskey}#" \
        backend.tf.example > backend.tf
  fi
  terraform init

  set -e
  if [[ $(kubectl config get-contexts | awk '{print $2}' | grep -o gcp-${__name} 2>/dev/null) == gcp-${__name} ]]; then
    echo cluster context found: gcp-${__name}
  else
    echo configuring cluster: gcp-${__name}

    set +e
    CLUSTER_OUTPUT=$(gcloud container clusters get-credentials ${__name} --region ${__region} --project ${__project_id} 2>&1)
    CLUSTER_STATUS=$?
    set -e

    if [[ $CLUSTER_STATUS -ne 0 ]]; then
      if [[ $CLUSTER_OUTPUT == *"Not found"* ]]; then
        echo warning: no cluster named ${__name} found in project ${__project_id}. skipping kubectl configuration
      else
        echo error occurred: $CLUSTER_OUTPUT
        exit 1
      fi
    else
      echo cluster credentials configured for ${__name}
    fi
  fi

  cd ${__root}/stage1
  if ! test -e backend.tf; then
    echo configuring stage1 backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        -e "s#KMS_ENCRYPTION_KEY#${__kmskey}#" \
        backend.gcp.tf.example > backend.tf
  fi
  if ! test -e env.auto.tfvars; then
    echo configuring stage1 terraform variables
    sed -e 's:^# ::' \
    -e 's:aws"|"gcp"|"azure"|"kind"|"k3d"|"other:gcp:' \
	-e "s#some-context#gcp-${__cluster_name}#" \
        env.auto.tfvars.example > env.auto.tfvars
  fi
  terraform init

  cd ${__root}/stage2
  if ! test -e backend.tf; then
    echo configuring stage2 backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        -e "s#KMS_ENCRYPTION_KEY#${__kmskey}#" \
        backend.gcp.tf.example > backend.tf
  fi
  if ! test -e env.auto.tfvars; then
    echo configuring stage2 terraform variables
    sed -e 's:^# ::' \
	      -e "s#some-context#gcp-${__cluster_name}#" \
	      -e "s#aws#${__cloud}#" \
	      -e "s#your_token#${__cloudflare_token}#" \
	      -e "s#your-cluster-id#${__dmtrd_cluster_id}#" \
	      -e "s#your-username#$__dmtrd_kafka_username#" \
	      -e "s#your-password#$__dmtrd_kafka_password#" \
	      -e "s#your-consumer-name#$__dmtrd_consumer_name#" \
	      -e "s#your-consumer-monitor-name#$__dmtrd_consumer_monitor_name#" \
	      -e "s#your-consumer-cache-name#$__dmtrd_consumer_cache_name#" \
	      -e "s#redpanda-0.domain.name,redpanda-1.domain.name,redpanda-2.domain.name#$__dmtrd_broker_urls#" \
        env.auto.tfvars.example > env.auto.tfvars
  fi
  terraform init

  cd ${__root}/stage3
  if ! test -e backend.tf; then
    echo configuring stage3 backend
    sed -e "s#BUCKET_NAME#${__bucket}#" \
        -e "s#REGION#${__region}#" \
        -e "s#KMS_ENCRYPTION_KEY#${__kmskey}#" \
        backend.gcp.tf.example > backend.tf
  fi
  if ! test -e env.auto.tfvars; then
    echo configuring stage3 terraform variables
    sed -e 's:^# ::' \
        -e "s#aws#${__cloud}#" \
        -e "s:eyJ...:${__cloudflared_token}:" \
	      -e "s:dmtr-cluster:${__dmtrd_cluster_id}:" \
	      -e "s#some-context#gcp-${__cluster_name}#" \
	      -e "s#some-provider#${__provider_name}#" \
        env.auto.tfvars.example > env.auto.tfvars
  fi
  terraform init

else # k3d

  cd ${__root}/bootstrap
  if test -e ${__root}/config.yaml; then
    __cluster_name=$(grep ^cluster_name: ${__root}/config.yaml | awk '{print $2}')
  fi
  if [[ -z ${__cluster_name} ]]; then
    __cluster_name=dmtr-cluster
  fi

  cd ${__root}/stage1
  if ! test -e env.auto.tfvars; then
    echo configuring stage1 terraform variables
    sed -e 's:^# ::' \
        -e 's:aws" | "gcp" | "azure" | "none:k3d:' \
	-e "s#some-context#k3d-${__cluster_name}#" \
        env.auto.tfvars.example > env.auto.tfvars
  fi

  cd ${__root}/stage2
  if ! test -e env.auto.tfvars; then
    echo configuring stage2 terraform variables
    sed -e 's:^# ::' \
	-e "s#some-context#k3d-${__cluster_name}#" \
        env.auto.tfvars.example > env.auto.tfvars
  fi

  cd ${__root}/stage3
  if ! test -e env.auto.tfvars; then
    echo configuring stage3 terraform variables
    sed -e 's:^# ::' \
        -e "s:eyJ...:${__cloudflared_token}:" \
	-e "s:dmtr-cluster:${__cluster_name}:" \
	-e "s#some-context#k3d-${__cluster_name}#" \
        env.auto.tfvars.example > env.auto.tfvars
  fi
fi
